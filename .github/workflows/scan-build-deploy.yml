name: Scan, build and deploy to Render

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main


jobs:

  # Scan et analyse des dépendances avec Trivy
  trivy_scan:
    runs-on: ubuntu-latest    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
        # Installation de Trivy
      - name: Installer Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.39.0/trivy_0.39.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.39.0_Linux-64bit.deb
        
        # Scanner de vulnérabilité avec Trivy et sotockage des données dans trivy_scan_results.txt
      - name: Scanner de vulnérabilité avec Trivy
        run: |
          trivy fs . --format table --output trivy_scan_results.txt --exit-code 1 --severity HIGH,CRITICAL
        
      # Chargement des résultats de l'analyse
      - name: Sauvegarde de l'analyse
        uses: actions/upload-artifact@v3
        with:
          name: trivy_scan_results
          path: trivy_scan_results.txt
      
      - name: Fail if vulnerabilities found
        run: |
          if [ $? -ne 0 ]; then
            echo "Vulnerabilities found!";
            exit 1;
          fi

  
  # Build de test l'applications
  build_app:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: Employee
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    env:
      PG_DB: Employee
      PG_USER: postgres
      PG_PASSWORD: password
      PG_HOST: localhost

    steps:
      - name: Checkout code
        uses: actions/checkout@v3     
      
      - name: Installer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.11.0'
        
      - name: Build
        run: |
          npm install
          npm run start &
  
      - name: Test que l'application est prête
        run: curl -X GET http://localhost:8887/health/live || exit 1


  # Déploiement sur Render
  deploy_render:
    runs-on: ubuntu-latest
    needs: [trivy_scan, build_app]


    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      
      # Vérification de l'existance de la base de donnée pour le provisionnement
      - name: Check if the database exists
        id: check-service
        run: |
          DB_EXISTS=$(curl --silent --request GET \
          --url 'https://api.render.com/v1/postgres?name=${{ secrets.RENDER_DB_NAME }}&ownerId=${{ secrets.RENDER_OWNER_ID }}' \
          --header 'accept: application/json' \
          --header 'Authorization: Bearer ${{ secrets.RENDER_API_KEY }}')
          
          if [ "$DB_EXISTS" == "[]" ]; then
            echo "The database does not exist."
            echo "provision=true" >> $GITHUB_ENV
          else
            echo "The database already exists."
            echo "provision=false" >> $GITHUB_ENV
          fi

      
      ########## Provisionnement ###############

      # Créer la base PostgreSQL
      - name: Create PostgreSQL Database
        if: env.provision == 'true'
        run: |
          DB_RESPONSE=$(curl --silent --request POST \
          --url https://api.render.com/v1/postgres \
          --header 'accept: application/json' \
          --header 'Authorization: Bearer ${{ secrets.RENDER_API_KEY }}' \
          --header 'content-type: application/json' \
          --data '
          {
            "databaseName": "employee",
            "databaseUser": "${{ secrets.DATABASE_USER }}",
            "enableHighAvailability": false,
            "plan": "free",
            "version": "16",
            "name": "${{ secrets.RENDER_DB_NAME }}",
            "ownerId": "${{ secrets.RENDER_OWNER_ID }}"
          }')

          if echo "$DB_RESPONSE" | js 'has("message")'; then
          echo "Database Creation Failed"
          exit 1
          fi

          echo "Database Successfully Created"

          # Extraire les valeurs avec jq
          id=$(echo "$DB_RESPONSE" | jq -r '.id')
          databaseName=$(echo "$DB_RESPONSE" | jq -r '.databaseName')
          databaseUser=$(echo "$DB_RESPONSE" | jq -r '.databaseUser')
          databaseHostname=$(echo "$DB_RESPONSE" | jq '.dashboardUrl' | awk -F'/' '{print $NF}' | sed 's/"$//')

          # Ajouter les variables à l'environnement GitHub
          echo "PG_ID=$id" >> $GITHUB_ENV
          echo "PG_DB_NAME=$databaseName" >> $GITHUB_ENV
          echo "PG_DB_USER=$databaseUser" >> $GITHUB_ENV
          echo "PG_HOST=$databaseHostname" >> $GITHUB_ENV

          # Informations de connection
          DB_CONNECTION=$(curl --silent --request GET \
          --url https://api.render.com/v1/postgres/$id/connection-info \
          --header 'accept: application/json' \
          --header 'Authorization: Bearer ${{ secrets.RENDER_API_KEY }}')

          # Extraire le mot de passe avec jq
          password=$(echo "$DB_CONNECTION" | jq -r '.password')

          # Ajouter les variables à l'environnement GitHub
          echo "PG_PASSWORD=$password" >> $GITHUB_ENV


      #### l'API ne permet pas la création du web_service avec le plan free.
      #### J'ai alors créé le web_service node dans l'application et les variables d'environments seront chargées après la création de la base de données


      # # Vérification de l'existance du service pour le provisionnement
      # - name: Check if Render service exists
      #   id: check-service
      #   run: |
      #     SERVICE_EXISTS=$(curl --silent --request GET \
      #     --url 'https://api.render.com/v1/services' \
      #     --header 'accept: application/json' \
      #     --header 'Authorization: Bearer ${{ secrets.RENDER_API_KEY }}')
          
      #     if [ "$SERVICE_EXISTS" == "[]" ]; then
      #       echo "The service does not exist."
      #       echo "provision_service=true" >> $GITHUB_ENV
      #     else
      #       echo "The service already exists."
      #       echo "provision_service=false" >> $GITHUB_ENV
      #     fi
      

      # - name: Create Web Service
      #   if: env.provision_service == 'true'
      #   run: |
      #     SERVICE_RESPONSE=$(curl --silent --request POST \
      #     --url https://api.render.com/v1/services \
      #     --header 'accept: application/json' \
      #     --header 'Authorization: Bearer ${{ secrets.RENDER_API_KEY }}' \
      #     --header 'content-type: application/json' \
      #     --data '
      #     {
      #       "type": "web_service",
      #       "autoDeploy": "no",
      #       "serviceDetails": {
      #         "pullRequestPreviewsEnabled": "no",
      #         "previews": {
      #           "generation": "off"
      #         },
      #         "runtime": "node",
      #         "env": "node",
      #         "envSpecificDetails": {
      #           "buildCommand": "npm install",
      #           "startCommand": "npm start &"
      #         },
      #         "plan": "free",
      #         "maintenanceMode": {
      #           "enabled": false
      #         }
      #       },
      #       "name": "${{ secrets.RENDER_SERVICE_NAME }}",
      #       "repo": "https://github.com/g-r-7/DevOps-Practice",
      #       "ownerId": "${{ secrets.RENDER_OWNER_ID }}",
      #       "rootDir": ".",
      #       "envVars": [
      #         {"key": "PG_DB", "value": "$PG_DB_NAME"},
      #         {"key": "PG_USER", "value": "$PG_DB_USER"},
      #         {"key": "PG_PASSWORD", "value": "$PG_PASSWORD"},
      #         {"key": "PG_HOST", "value": "$PG_HOST"}
      #       ]
      #     }')

      #     if echo "$SERVICE_RESPONSE" | js 'has("message")'; then
      #     echo "Service Creation Failed"
      #     exit 1
      #     fi

      #     echo "Service Successfully Created"

      #     service_id=$(echo "$SERVICE_RESPONSE" | jq -r '.service.id')

      #     # Ajouter l'ID à l'environnement GitHub
      #     echo "SERVICE_ID=$service_id" >> $GITHUB_ENV


      ###### PUT des variables d'environnement au service #####
      - name: put environnement variables
        run: |
          RESPONSE_UPDATE_VARS=$(curl --silent --request PUT \
          --url https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/env-vars \
          --header 'accept: application/json' \
          --header 'Authorization: Bearer ${{ secrets.RENDER_API_KEY }}' \
          --header 'content-type: application/json' \
          --data '
          [
            {"key": "PG_DB", "value": "${{env.PG_DB_NAME}}"},
            {"key": "PG_USER", "value": "${{env.PG_DB_USER}}"},
            {"key": "PG_PASSWORD", "value": "${{env.PG_PASSWORD}}"},
            {"key": "PG_HOST", "value": "${{env.PG_HOST}}"}
          ]')

          if echo "$RESPONSE_UPDATE_VARS" | jq 'has("message")'; then
          echo "Variables Update Failed"
          exit 1
          fi

          echo "Variables Successfully Updated"

          
      ########## Déploiement du service ############
      - name: Déploiement
        run: |
          DEPLOY_RESPONSE=$(curl --silent --request POST \
          --url https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys \
          --header 'accept: application/json' \
          --header 'Authorization: Bearer ${{ secrets.RENDER_API_KEY }}' \
          --header 'content-type: application/json' \
          --data '
          {
            "clearCache": "do_not_clear"
          }')
          
          if echo "$DEPLOY_RESPONSE" | js 'has("message")'; then
          echo "Deployment Failed"
          exit 1
          fi
          
          echo "Deploy Response: $DEPLOY_RESPONSE"
          